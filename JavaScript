
const balance = document.getElementById('balance');
const money_plus = document.getElementById('money-plus');
const money_minus = document.getElementById('money-minus');
const list = document.getElementById('list');
const form = document.getElementById('form');
const text = document.getElementById('text');
const amount = document.getElementById('amount');

// Load transactions from localStorage or start with empty
let transactions = JSON.parse(localStorage.getItem('transactions')) || [];

// Add new transaction
function addTransaction(e) {
  e.preventDefault();

  if (text.value.trim() === '' || amount.value.trim() === '') {
    alert('Please add a description and amount');
  } else {
    const newAmount = +amount.value; // Get the transaction amount

    // Calculate total income and expense
    const amounts = transactions.map(t => t.amount);
    const totalIncome = amounts.filter(item => item > 0)
                                .reduce((acc, item) => acc + item, 0);
    const totalExpense = amounts.filter(item => item < 0)
                                 .reduce((acc, item) => acc + item, 0) * -1;

    // Check if the new expense exceeds available balance (income - totalExpense)
    if (newAmount < 0 && (totalIncome - totalExpense + newAmount) < 0) {
      showAlert("❌ Your balance is getting low. You can't add this expense!");
      return; // Prevent adding the transaction if the balance is insufficient
    }

    const transaction = {
      id: generateID(),
      text: text.value,
      amount: newAmount
    };

    transactions.push(transaction);
    addTransactionDOM(transaction);
    updateValues();
    updateLocalStorage();

    text.value = '';
    amount.value = '';
  }
}

// Generate unique ID
function generateID() {
  return Math.floor(Math.random() * 100000000);
}

// Add transaction to DOM
function addTransactionDOM(transaction) {
  const sign = transaction.amount < 0 ? '-' : '+';
  const item = document.createElement('li');

  item.classList.add(transaction.amount < 0 ? 'minus' : 'plus');
  item.innerHTML = `
    ${transaction.text} <span>${sign}$${Math.abs(transaction.amount).toFixed(2)}</span>
    <button class="delete-btn" onclick="removeTransaction(${transaction.id})">x</button>
  `;

  list.appendChild(item);
  showAlert("✅ Transaction added!");
}

// Update balance, income, and expense
function updateValues() {
  const amounts = transactions.map(t => t.amount);
  const total = amounts.reduce((acc, item) => acc + item, 0).toFixed(2);
  const income = amounts.filter(item => item > 0)
                        .reduce((acc, item) => acc + item, 0)
                        .toFixed(2);
  const expense = (
    amounts.filter(item => item < 0)
           .reduce((acc, item) => acc + item, 0) * -1
  ).toFixed(2);

  balance.innerText = `$${total}`;
  money_plus.innerText = `+$${income}`;
  money_minus.innerText = `-$${expense}`;
}

// Remove transaction
function removeTransaction(id) {
  transactions = transactions.filter(transaction => transaction.id !== id);
  updateLocalStorage();
  init();
  showAlert("❌ Transaction deleted!");
}

// Save to localStorage
function updateLocalStorage() {
  localStorage.setItem('transactions', JSON.stringify(transactions));
}

// Initialize app
function init() {
  list.innerHTML = '';
  transactions.forEach(addTransactionDOM);
  updateValues();
}

init();
form.addEventListener('submit', addTransaction);

// Show alert message
function showAlert(message) {
  const alert = document.getElementById('alert');
  alert.textContent = message;
  alert.classList.remove('hidden');
  
  setTimeout(() => {
    alert.classList.add('hidden');
  }, 2000);
}
